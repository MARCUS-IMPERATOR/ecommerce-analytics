name: CI/CD Pipeline

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ecommerce-analytics-backend
  FRONTEND_IMAGE_NAME: ecommerce-analytics-frontend
  ML_IMAGE_NAME: ecommerce-analytics-ml-service

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: ecom_analytics_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Download OpenTelemetry agent
      run: |
        cd ../../Backend/ecomAnalytics/
        curl -L -o opentelemetry-javaagent.jar \
          "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"

    - name: Run backend tests
      run: |
        cd ../../Backend/ecomAnalytics/
        mvn clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ecom_analytics_test
        SPRING_DATASOURCE_USERNAME: user
        SPRING_DATASOURCE_PASSWORD: pass

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up JDK 17 for backend build
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Download OpenTelemetry agent
      run: |
        cd Backend/ecomAnalytics/
        curl -L -o opentelemetry-javaagent.jar \
          "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"

    - name: Build Spring Boot application
      run: |
        cd Backend/ecomAnalytics/
        mvn clean package -DskipTests

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend/ecomAnalytics
        file: ./Backend/ecomAnalytics/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./FrontEnd/ecommerce-analytics-dashboard
        file: ./FrontEnd/ecommerce-analytics-dashboard/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push ML service image
      uses: docker/build-push-action@v5
      with:
        context: ./ML
        file: ./ML/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image digest
      run: |
        echo "Backend image digest: ${{ steps.docker_build_backend.outputs.digest }}"
        echo "Frontend image digest: ${{ steps.docker_build_frontend.outputs.digest }}"
        echo "ML service image digest: ${{ steps.docker_build_ml.outputs.digest }}"

  deploy-notification:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment notification
      run: |
        echo "‚úÖ Images successfully built and pushed to DockerHub!"
        echo "üê≥ Backend: docker.io/${{ env.BACKEND_IMAGE_NAME }}:latest"
        echo "üê≥ Frontend: docker.io/${{ env.FRONTEND_IMAGE_NAME }}:latest" 
        echo "üê≥ ML Service: docker.io/${{ env.ML_IMAGE_NAME }}:latest"
        echo ""
        echo "üì¶ Tagged versions:"
        echo "   - latest (main branch)"
        echo "   - ${{ github.sha }} (commit hash)"
        echo ""
        echo "üöÄ Ready for deployment!"