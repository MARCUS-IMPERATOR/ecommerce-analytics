name: CI/CD Pipeline

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: marcusimperi
  BACKEND_IMAGE_NAME: ecommerce-analytics-backend
  FRONTEND_IMAGE_NAME: ecommerce-analytics-frontend
  ML_IMAGE_NAME: ecommerce-analytics-ml-service

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: ecom_analytics_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Debug repository structure 
      #   run: |
      #     echo "=== ROOT ==="
      #     ls -la
      #     echo ""
      #     echo "=== BACKEND ==="
      #     find . -iname "*ackend*" -maxdepth 3 -type d | head -10
      #     echo ""
      #     echo "=== FRONTEND ==="
      #     find . -iname "*ront*" -maxdepth 3 -type d | head -10
      #     echo ""
      #     echo "=== ML ==="
      #     find . -iname "ml" -maxdepth 3 -type d || true

      - name: Setup Java (Temurin 21)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download OpenTelemetry agent
        run: |
          if [ -d "BackEnd/ecomAnalytics" ]; then
            cd BackEnd/ecomAnalytics
            curl -L -o opentelemetry-javaagent.jar \
              "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"
          else
            echo "Backend path not found; skipping otel download."
          fi

      # - name: Run backend tests
      #   run: |
      #     cd BackEnd/ecomAnalytics
      #     mvn clean test
      #   env:
      #     SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ecom_analytics_test
      #     SPRING_DATASOURCE_USERNAME: user
      #     SPRING_DATASOURCE_PASSWORD: pass

  build-backend:
    name: Build & push backend image
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Java (Temurin 21)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Spring Boot package
        run: |
          cd BackEnd/ecomAnalytics
          mvn clean package -DskipTests

      - name: Build & push backend image
        id: docker_build_backend
        uses: docker/build-push-action@v5
        with:
          context: ./BackEnd/ecomAnalytics
          file: ./BackEnd/ecomAnalytics/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build & push frontend image
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push frontend image
        id: docker_build_frontend
        uses: docker/build-push-action@v5
        with:
          context: ./FrontEnd/ecommerce-analytics-dashboard
          file: ./FrontEnd/ecommerce-analytics-dashboard/DockerFile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-ml:
    name: Build & push ML service image
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push ML image
        id: docker_build_ml
        uses: docker/build-push-action@v5
        with:
          context: ./ML
          file: ./ML/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy 
    needs: [ build-backend, build-frontend, build-ml ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Show Build Images Status
        run: |
          echo "Images successfully built and pushed to DockerHub!"
          echo "Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
          echo "Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
          echo "ML Service: ${{ env.REGISTRY }}/${{ env.ML_IMAGE_NAME }}:latest"
          echo ""
          echo "Tagged versions:"
          echo "  - latest (main branch)"
          echo "  - ${{ github.sha }} (commit hash)"
          echo ""
          echo "Ready for deployment!"
