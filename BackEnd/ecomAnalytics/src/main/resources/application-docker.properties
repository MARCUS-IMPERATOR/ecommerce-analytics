
server.port=8080
server.servlet.context-path=/


# Database
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/ecom_analytics}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:pass}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true


# Hikari
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# Flyway
spring.flyway.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/ecom_analytics}
spring.flyway.user=${SPRING_DATASOURCE_USERNAME:user}
spring.flyway.password=${SPRING_DATASOURCE_PASSWORD:pass}
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration

# Redis
spring.data.redis.host=${SPRING_REDIS_HOST:redis}
spring.data.redis.port=${SPRING_REDIS_PORT:6379}
spring.data.redis.timeout=5000ms
spring.data.redis.connect-timeout=3000ms
spring.data.redis.database=0
spring.cache.type=redis
spring.cache.redis.time-to-live=3600000ms
spring.cache.redis.cache-null-values=false
management.metrics.enable.redis= true

# Lettuce connection pool
spring.data.redis.lettuce.pool.max-active=10
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=2
spring.data.redis.lettuce.pool.max-wait=2000ms

# Kafka
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
spring.kafka.consumer.group-id=ml-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.sqli.ecomAnalytics.events
spring.kafka.consumer.properties.spring.json.value.default.type=com.sqli.ecomAnalytics.dto.ForecastResponse
#
#spring.kafka.producer.acks=1
#spring.kafka.producer.retries=1


# JPA / Hibernate

# Actuator / Monitoring
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

management.health.defaults.enabled=true
management.prometheus.metrics.export.enabled=true
management.endpoints.web.base-path=/actuator
management.server.port=8080
management.endpoints.access.default=unrestricted

management.health.redis.enabled=true
management.health.db.enabled=true

management.health.kafka.enabled=false


# OpenTelemetry
otel.service.name=${OTEL_RESOURCE_ATTRIBUTES:service.name=ecommerce-backend}
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://otel-collector:4317}


# Log
logging.level.org.flywaydb=WARN
logging.level.com.zaxxer.hikari=WARN
logging.level.org.apache.kafka=WARN
logging.level.io.lettuce.core=INFO
logging.level.root=INFO

#Data Generation
data-generation.enabled=true

data-generation.customers.count=400
data-generation.customers.geog-dist.morocco-perc=15
data-generation.customers.geog-dist.france-perc=35
data-generation.customers.geog-dist.usa-perc=25
data-generation.customers.geog-dist.canada-perc=10
data-generation.customers.geog-dist.other-perc=15

data-generation.products.count=120
data-generation.products.category-distribution.smartphones=20
data-generation.products.category-distribution.laptops=20
data-generation.products.category-distribution.tablets=20
data-generation.products.category-distribution.gaming=20
data-generation.products.category-distribution.accessories=20
data-generation.products.category-distribution.others=20

data-generation.orders.months=48
data-generation.orders.daily-volume=3